name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_NAME: you-and-i-backend

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    # 1. Java 17 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 2. Spring 설정 파일 생성
    - name: make properties
      uses: actions/checkout@v3
    - run: mkdir -p ./src/main/resources
    - run: touch ./src/main/resources/application.yml
    - run: touch ./src/main/resources/application-dev.yml
    - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
    - run: echo "${{ secrets.APPLICATION_DEV }}" > ./src/main/resources/application-dev.yml
        
    # 3. SpringBoot 애플리케이션 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: clean bootJar

    # 4. Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/you-and-i-backend .

    # 5. Docker Hub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # 6. Docker Hub 이미지 push
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/you-and-i-backend

  # docker image를 ec2에서 pull 받아서 실행
  run-docker-image-on-s3:
    needs: build-docker-image
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Write Docker image name to file
      run: echo "${{ secrets.DOCKERHUB_USERNAME }}/you-and-i-backend" > image.txt

    - name: Create zip file for AWS CodeDeploy
      run: mkdir ${{ secrets.CODE_DEPLOY_NAME }} && cp -r appspec.yml image.txt scripts ${{ secrets.CODE_DEPLOY_NAME }}

      # AWS 설정
    - name: AWS Configure
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.S3_REGION }}

      # AWS S3로 배포 파일 업로드
    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ secrets.CODE_DEPLOY_NAME }} \
          --s3-location s3://${{ secrets.S3_BUCKET_NAME }}/codedeploy/$GITHUB_SHA.zip \
          --ignore-hidden-files \
          --source ${{ secrets.CODE_DEPLOY_NAME }}

      # AWS EC2 CodeDeploy 배포 요청
    - name: Delpoy to AWS EC2
      run: |
        aws deploy create-deployment \
          --application-name ${{ secrets.CODE_DEPLOY_NAME }} \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --deployment-group-name ${{ secrets.CODE_DEPLOY_GROUP }} \
          --description "Deploy artscope" \
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},key=codedeploy/$GITHUB_SHA.zip,bundleType=zip
